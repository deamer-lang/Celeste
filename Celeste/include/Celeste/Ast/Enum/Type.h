#ifndef CELESTE_AST_ENUM_TYPE_H
#define CELESTE_AST_ENUM_TYPE_H

#include <cstddef>

namespace Celeste { namespace ast { 

	enum class Type : std::size_t
	{
		// Reserved
		deamerreserved_unknown,

		// Terminal
		SINGLE_COMMENT,
		CONSTANT,
		FUNCTION,
		CLASS,
		ENUM,
		CONDITIONAL,
		CODE,
		ATTRIBUTETOK,
		RUNTIME,
		STATIC,
		AUTO,
		AUTOTYPE,
		TEMPLATE,
		NAMESPACE,
		OPERATORNAME,
		OVERRIDE,
		VIRTUAL,
		PURE,
		AS,
		IN,
		DISPLAY,
		RETURN,
		FOR,
		IF,
		ELSEIF,
		ELSE,
		INLINE,
		CONSTRUCTOR,
		FILE_,
		PROGRAM_,
		IMPORT,
		PUBLIC,
		PROTECTED,
		PRIVATE,
		INHERIT,
		COMPOSITE,
		LEFT_BRACKET,
		RIGHT_BRACKET,
		LEFT_SQUARE_BRACKET,
		RIGHT_SQUARE_BRACKET,
		LEFT_PARANTHESIS,
		RIGHT_PARANTHESIS,
		COLON,
		SEMICOLON,
		COMMA,
		DOT,
		LTEQ,
		GTEQ,
		LT,
		GT,
		PLUSEQ,
		MINUSEQ,
		MULTIPLYEQ,
		DIVIDEEQ,
		EQEQ,
		EQ,
		NOTEQ,
		NOT,
		PLUSPLUS,
		PLUS,
		MINUSMINUS,
		MINUS,
		DIVIDE,
		MULTIPLY,
		VARNAME,
		NUMBER,
		DECIMAL,
		TEXT,
		ESCAPE_CHARS,


		// NonTerminal
		program,
		root_program,
		standard_block,
		deamerreserved_star__stmt__,
		stmt,
		import_statement,
		file_import,
		mutation_group,
		deamerreserved_arrow__symbol_reference__,
		deamerreserved_star__COMMA__symbol_reference__,
		assignment,
		assignment_operator,
		conditional_if,
		conditional_else_if,
		conditional_else,
		conditional_block,
		template_conditional_function_declaration,
		deamerreserved_arrow__template_parameter__,
		deamerreserved_star__COMMA__template_parameter__,
		deamerreserved_arrow__conditional_function_argument__,
		deamerreserved_star__COMMA__conditional_function_argument__,
		deamerreserved_arrow__function_argument__,
		deamerreserved_star__COMMA__function_argument__,
		conditional_function_declaration,
		template_code_function_declaration,
		code_function_declaration,
		return_statement,
		symbol_increase,
		symbol_decrease,
		expression,
		expression_no_value,
		t_expression,
		f_expression,
		display_call,
		for_loop,
		for_iteration_loop,
		for_each_loop,
		for_variable,
		iterator,
		for_block,
		namespace_declaration,
		deamerreserved_arrow__namespace_name__,
		deamerreserved_star__DOT__namespace_name__,
		namespace_block,
		namespace_name,
		inline_class_declaration,
		deamerreserved_arrow__inline_class_declaration_composite__,
		deamerreserved_star__COMMA__inline_class_declaration_composite__,
		inline_class_declaration_composite,
		deamerreserved_arrow__inline_class_declaration_composite_alias__,
		deamerreserved_star__COMMA__inline_class_declaration_composite_alias__,
		inline_class_declaration_composite_alias,
		inline_class_declaration_composite_name,
		created_class_name,
		code_block,
		deamerreserved_arrow__code_block_input_argument__,
		deamerreserved_star__COMMA__code_block_input_argument__,
		code_block_input_argument,
		code_block_argument,
		code_block_argument_name,
		code_block_program,
		variable_declaration,
		array_declaration,
		variable_name,
		template_function_declaration,
		function_declaration,
		trailing_return_type,
		return_type,
		conditional_function_argument,
		function_argument,
		function_argument_type,
		function_argument_name,
		condition_modifier_function_call,
		deamerreserved_arrow__condition_modifier_argument__,
		deamerreserved_star__COMMA__condition_modifier_argument__,
		condition_modifier_name,
		condition_modifier_argument,
		function_body,
		function_name,
		template_class_declaration,
		template_parameter,
		template_parameter_name,
		class_declaration,
		deamerreserved_arrow__class_inherit_base__,
		deamerreserved_star__COMMA__class_inherit_base__,
		class_name,
		execution_keyword_permutation,
		class_body,
		deamerreserved_star__class_stmt__,
		class_stmt,
		class_stmt_member_field_declaration,
		member_field_name,
		class_stmt_member_function,
		class_stmt_member_template_function,
		template_class_stmt_constructor,
		class_stmt_constructor,
		accessibility,
		class_inherit_base,
		inherit_base,
		inherit_base_name,
		compound_base,
		deamerreserved_arrow__compound_base_alias__,
		deamerreserved_star__COMMA__compound_base_alias__,
		compound_base_name,
		compound_base_alias,
		attribute_section,
		deamerreserved_arrow__attribute__,
		deamerreserved_star__deamerreserved_optional__COMMA____attribute__,
		attribute,
		deamerreserved_arrow__attribute_argument__,
		deamerreserved_star__COMMA__attribute_argument__,
		deamerreserved_arrow__attribute_template_argument__,
		deamerreserved_star__COMMA__attribute_template_argument__,
		attribute_argument,
		attribute_template_argument,
		attribute_declaration,
		deamerreserved_arrow__attribute_function_argument__,
		deamerreserved_star__COMMA__attribute_function_argument__,
		attribute_function_argument,
		attribute_name,
		enum_declaration,
		deamerreserved_star__enumeration__,
		enum_name,
		enumeration,
		enumeration_name,
		enumeration_value,
		symbol_reference,
		deamerreserved_arrow__symbol__,
		deamerreserved_star__DOT__symbol_secondary__,
		symbol_secondary,
		deamerreserved_star__symbol_access__,
		symbol,
		symbol_access,
		auto_deduce_array,
		symbol_name_secondary,
		symbol_name,
		function_access,
		deamerreserved_arrow__expression__,
		deamerreserved_star__COMMA__expression__,
		index_access,
		anonymous_access,
		type,
		deamerreserved_star__type_modifier__,
		type_modifier,
		value_list,
		deamerreserved_arrow__full_value__,
		deamerreserved_star__COMMA__full_value__,
		full_value,
		value,
		tuple,

	};

	static inline bool operator==(std::size_t lhs, ::Celeste::ast::Type rhs)
	{
		return lhs == static_cast<std::size_t>(rhs);
	}

	static inline bool operator==(::Celeste::ast::Type lhs, std::size_t rhs)
	{
		return static_cast<std::size_t>(lhs) == rhs;
	}

	static inline bool operator==(int lhs, ::Celeste::ast::Type rhs)
	{
		return lhs == static_cast<std::size_t>(rhs);
	}

	static inline bool operator==(::Celeste::ast::Type lhs, int rhs)
	{
		return static_cast<std::size_t>(lhs) == rhs;
	}
}}

#endif // CELESTE_AST_ENUM_TYPE_H